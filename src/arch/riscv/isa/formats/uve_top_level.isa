/////////////////////////////////
//
// Uve Top level decoder
// -----------------
// Jo√£o Domingos
//

output header {{
namespace Uve
{
    StaticInstPtr decodeVectorLoad(ExtMachInst machInst);
    StaticInstPtr decodeVectorStore(ExtMachInst machInst);
    StaticInstPtr decodeVectorDup(ExtMachInst machInst);
    StaticInstPtr decodeVectorMove(ExtMachInst machInst);
    StaticInstPtr decodeVectorMoveVS(ExtMachInst machInst);
    StaticInstPtr decodeVectorMoveSV(ExtMachInst machInst);
    StaticInstPtr decodeVectorConv(ExtMachInst nachInst);

    StaticInstPtr decodeArithmetic(ExtMachInst machInst);
    StaticInstPtr decodeLogic(ExtMachInst machInst);
    StaticInstPtr decodeMisc(ExtMachInst machInst);

    // StaticInstPtr decodeSveIntArithBinPred(ExtMachInst machInst);
    // StaticInstPtr decodeSveIntReduc(ExtMachInst machInst);
    // StaticInstPtr decodeSveShiftByImmPred(ExtMachInst machInst);
    // StaticInstPtr decodeSveIntArithUnaryPred(ExtMachInst machInst);
    // StaticInstPtr decodeSveIntMulAdd(ExtMachInst machInst);
    // StaticInstPtr decodeSveIntArithUnpred(ExtMachInst machInst);
}
}};


output decoder {{
namespace Uve
{
    StaticInstPtr
    decodeUveSSStream(ExtMachInst machInst){
        return new Unknown(machInst);
    }

    StaticInstPtr
    decodeUveSOLoop(ExtMachInst machInst){
        return new Unknown(machInst);
    }

    StaticInstPtr
    decodeUveSOPred(ExtMachInst machInst){
        return new Unknown(machInst);
    }

    StaticInstPtr
    decodeUveSOArithLogicMisc(ExtMachInst machInst){
        switch (bits(machInst, 31, 30))
        {
            case 0x0: //Arith
                return decodeArithmetic(machInst);
                break;
            case 0x3: //Logic
                return decodeLogic(machInst);
                break;
            case 0x1: //Misc
                return decodeMisc(machInst);
                break;
            default:
                return new Unknown(machInst);
                break;
        }
    }

    StaticInstPtr
    decodeUveSOVectorMemControl(ExtMachInst machInst){
        switch (bits(machInst, 28, 26))
        {
            case 0x0: //Vector Load
                return decodeVectorLoad(machInst);
                break;
            case 0x1: //Vector Store
                return decodeVectorStore(machInst);
                break;
            case 0x3: //Vector Duplicate
                return decodeVectorDup(machInst);
                break;
            case 0x2:
                switch (bits(machInst, 25, 24))
                {
                case 0x0: //Vector Move Vec to Vec
                    return decodeVectorMove(machInst);
                    break;
                case 0x1: {//Vector Move Vec <-> Scl
                        // mvVS
                        if(bits(machInst, 23)==0){
                            return decodeVectorMoveVS(machInst);
                        }
                        // mvSV
                        else {
                            return decodeVectorMoveSV(machInst);
                        }
                        break;
                    }
                default:  //Vector Conv
                    return decodeVectorConv(machInst);
                    break;
                }
            default:
                return new Unknown(machInst);
                break;
        }
    }
}
}};

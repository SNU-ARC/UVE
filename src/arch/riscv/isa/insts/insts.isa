// -*- mode:c++ -*-

//JMNOTE: UVE Template Magic for width conversion with type_traits
let {{
    exec_output = '''
    template <class WidthSize>
    struct width_converter{
        static const uint8_t width = 3;
    };
    template <>
    struct width_converter<uint32_t>{
        static const uint8_t width = 2;
    };
    template <>
    struct width_converter<uint16_t>{
        static const uint8_t width = 1;
    };
    template <>
    struct width_converter<uint8_t>{
        static const uint8_t width = 0;
    };
    '''

    header_output = '''
    #define MEM_PRINTF(mem,dir,vec,count)  DPRINTF(UVEMem, "______________" \
            "__________________\\n"); \
            std::string ss; \
            for (int i = 0; i < count; i++) { \
                ss += "(" + std::to_string(i) + ") M[" + \
                std::to_string(mem[i]) + "]" dir "V[" + \
                std::to_string(vec[i]) + "] -"; \
                if(i % 30 == 29) ss += "\\n"; \
            } \
            DPRINTF(UVEMem, (ss+="\\n").c_str() ); \
            DPRINTF(UVEMem, "________________________________\\n"); \
    '''
}};

//UVE
##include "uve_vector_mem.isa"
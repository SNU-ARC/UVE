diff --git a/bfd/bfd-in2.h b/bfd/bfd-in2.h
index f4b3720..6c8798c 100644
--- a/bfd/bfd-in2.h
+++ b/bfd/bfd-in2.h
@@ -4789,6 +4789,8 @@ number for the SBIC, SBIS, SBI and CBI instructions  */
   BFD_RELOC_RISCV_SET16,
   BFD_RELOC_RISCV_SET32,
   BFD_RELOC_RISCV_32_PCREL,
+  BFD_RELOC_RISCV_NULL_PLACE,
+  BFD_RELOC_RISCV_UVE_STREAM_BRANCH,
 
 /* Renesas RL78 Relocations.  */
   BFD_RELOC_RL78_NEG8,
diff --git a/bfd/bfd.c b/bfd/bfd.c
index 985c825..903c130 100644
--- a/bfd/bfd.c
+++ b/bfd/bfd.c
@@ -866,6 +866,8 @@ _bfd_doprnt (FILE *stream, const char *format, union _bfd_doprnt_args *args)
 	      PRINT_TYPE (char *, p);
 	      break;
 	    case 'p':
+		//JMNOTE: UVEBRANCH
+		case 'k':
 	      PRINT_TYPE (void *, p);
 	      break;
 	    case 'A':
@@ -1093,6 +1095,8 @@ _bfd_doprnt_scan (const char *format, union _bfd_doprnt_args *args)
 		  }
 	      }
 	      break;
+		//JMUVE:BRANCH
+		case 'k':
 	    case 's':
 	    case 'p':
 	    case 'A':
diff --git a/bfd/elfnn-riscv.c b/bfd/elfnn-riscv.c
index 5f66f4f..a0ee72b 100644
--- a/bfd/elfnn-riscv.c
+++ b/bfd/elfnn-riscv.c
@@ -564,6 +564,7 @@ riscv_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,
 	case R_RISCV_CALL:
 	case R_RISCV_JAL:
 	case R_RISCV_BRANCH:
+	case R_RISCV_UVE_STREAM_BRANCH:
 	case R_RISCV_RVC_BRANCH:
 	case R_RISCV_RVC_JUMP:
 	case R_RISCV_PCREL_HI20:
@@ -1438,6 +1439,13 @@ perform_relocation (const reloc_howto_type *howto,
       value = ENCODE_SBTYPE_IMM (value);
       break;
 
+	//JMNOTE: UVEBRANCH
+	case R_RISCV_UVE_STREAM_BRANCH:
+      if (!VALID_UVEATYPE_IMM (value))
+	return bfd_reloc_overflow;
+      value = ENCODE_UVEATYPE_IMM (value);
+      break;
+
     case R_RISCV_RVC_BRANCH:
       if (!VALID_RVC_B_IMM (value))
 	return bfd_reloc_overflow;
@@ -1792,6 +1800,8 @@ riscv_elf_relocate_section (bfd *output_bfd,
 
 	case R_RISCV_HI20:
 	case R_RISCV_BRANCH:
+	//JMNOTE: UVEBRANCH
+	case R_RISCV_UVE_STREAM_BRANCH:
 	case R_RISCV_RVC_BRANCH:
 	case R_RISCV_RVC_LUI:
 	case R_RISCV_LO12_I:
diff --git a/bfd/libbfd.h b/bfd/libbfd.h
index 2f5f16e..9678ad3 100644
--- a/bfd/libbfd.h
+++ b/bfd/libbfd.h
@@ -2222,6 +2222,8 @@ static const char *const bfd_reloc_code_real_names[] = { "@@uninitialized@@",
   "BFD_RELOC_RISCV_SET16",
   "BFD_RELOC_RISCV_SET32",
   "BFD_RELOC_RISCV_32_PCREL",
+  "BFD_RELOC_RISCV_NULL_PLACE",
+  "BFD_RELOC_RISCV_UVE_STREAM_BRANCH",
   "BFD_RELOC_RL78_NEG8",
   "BFD_RELOC_RL78_NEG16",
   "BFD_RELOC_RL78_NEG24",
diff --git a/bfd/reloc.c b/bfd/reloc.c
index a1353a2..b64c42d 100644
--- a/bfd/reloc.c
+++ b/bfd/reloc.c
@@ -5199,6 +5199,10 @@ ENUMX
   BFD_RELOC_RISCV_SET32
 ENUMX
   BFD_RELOC_RISCV_32_PCREL
+ENUMX
+  BFD_RELOC_RISCV_NULL_PLACE
+ENUMX
+  BFD_RELOC_RISCV_UVE_STREAM_BRANCH
 ENUMDOC
   RISC-V relocations.
 
diff --git a/include/elf/riscv.h b/include/elf/riscv.h
index defbbf4..a0e0531 100644
--- a/include/elf/riscv.h
+++ b/include/elf/riscv.h
@@ -88,6 +88,8 @@ START_RELOC_NUMBERS (elf_riscv_reloc_type)
   RELOC_NUMBER (R_RISCV_SET16, 55)
   RELOC_NUMBER (R_RISCV_SET32, 56)
   RELOC_NUMBER (R_RISCV_32_PCREL, 57)
+  RELOC_NUMBER (R_RISCV_NULL_PLACE, 58)
+  RELOC_NUMBER (R_RISCV_UVE_STREAM_BRANCH, 59)
 END_RELOC_NUMBERS (R_RISCV_max)
 
 /* Processor specific flags for the ELF header e_flags field.  */
diff --git a/bfd/elfxx-riscv.c b/bfd/elfxx-riscv.c
index c0f006f5e5..aa9271444a 100644
--- a/bfd/elfxx-riscv.c
+++ b/bfd/elfxx-riscv.c
@@ -855,6 +855,39 @@ static reloc_howto_type howto_table[] =
 	 0,				/* src_mask */
 	 MINUS_ONE,			/* dst_mask */
 	 FALSE),			/* pcrel_offset */
+
+	//JMNOTE:UVEBRANCH
+	/* 12-bit PC-relative branch offset.  */
+   HOWTO (R_RISCV_NULL_PLACE,		/* type */
+	 0,				/* rightshift */
+	 2,				/* size */
+	 32,				/* bitsize */
+	 TRUE,				/* pc_relative */
+	 0,				/* bitpos */
+	 complain_overflow_signed,	/* complain_on_overflow */
+	 bfd_elf_generic_reloc,		/* special_function */
+	 "R_RISCV_NULL_PLACE",		/* name */
+	 FALSE,				/* partial_inplace */
+	 0,				/* src_mask */
+	 ENCODE_UVEATYPE_IMM (-1U),	/* dst_mask */
+	 TRUE),				/* pcrel_offset */
+	
+    //JMNOTE:UVEBRANCH
+	/* 12-bit PC-relative branch offset.  */
+   HOWTO (R_RISCV_UVE_STREAM_BRANCH,		/* type */
+	 0,				/* rightshift */
+	 2,				/* size */
+	 32,				/* bitsize */
+	 TRUE,				/* pc_relative */
+	 0,				/* bitpos */
+	 complain_overflow_signed,	/* complain_on_overflow */
+	 bfd_elf_generic_reloc,		/* special_function */
+	 "R_RISCV_UVE_STREAM_BRANCH",		/* name */
+	 FALSE,				/* partial_inplace */
+	 0,				/* src_mask */
+	 ENCODE_UVEATYPE_IMM (-1U),	/* dst_mask */
+	 TRUE),				/* pcrel_offset */
+
 };
 
 /* A mapping from BFD reloc types to RISC-V ELF reloc types.  */
@@ -917,6 +950,8 @@ static const struct elf_reloc_map riscv_reloc_map[] =
   { BFD_RELOC_RISCV_SET16, R_RISCV_SET16 },
   { BFD_RELOC_RISCV_SET32, R_RISCV_SET32 },
   { BFD_RELOC_RISCV_32_PCREL, R_RISCV_32_PCREL },
+  { BFD_RELOC_RISCV_NULL_PLACE, R_RISCV_NULL_PLACE },
+  { BFD_RELOC_RISCV_UVE_STREAM_BRANCH, R_RISCV_UVE_STREAM_BRANCH },
 };
 
 /* Given a BFD reloc type, return a howto structure.  */

